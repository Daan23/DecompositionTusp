package mspInstance;

import java.util.ArrayList;

public class Instance {
	private ArrayList<Train> 		trains; 
	
	public Instance() {
		trains 		= new ArrayList<Train>(); 
	}

	public void addTrain(String name, int length) {
		Train t = new Train(name, length); 
		trains.add(t); 
	}

	public int nofTrains() {
		return trains.size();
	}

	public Train getTrain(int index) {
		return trains.get(index); 
	}
	
	public ArrayList<Train> getTrains() {
		return this.trains; 
	}
	
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("nof Trains: " + this.nofTrains() + "\n"); 
		for(int i=0; i<this.nofTrains(); i++) {
			sb.append(this.getTrain(i).toString() + "\n"); 
		}
		sb.append("\n"); 
		sb.append(this.precedencesToString()); 
		return sb.toString(); 
	}
	
	public String precedencesToString() {
		StringBuilder sb = new StringBuilder();
		ArrayList<Precedence> list = this.getPrecedences(); 
		sb.append("Precedences: \n"); 
		for(Precedence p : list) {
			sb.append(p.toString() + "\n"); 
		}
		return sb.toString(); 
	}
	
	/**
	 * Dept first search to all precedences, timecomplexity: O(|nofTrain| + |nofTasks| + |nofPrecedences|) 
	 * If this would become important for some algorithm, the implementation of Instance should be changed. 
	 * @return a list of all precedences
	 */
	private ArrayList<Precedence> getPrecedences() {
		ArrayList<Precedence> list = new ArrayList<>(); 
		for(Train t : this.trains) {
			list.addAll(t.getPrecedences()); 
		}
		return list; 
	}
	

}
