package mspInstance;

import java.util.ArrayList;

import distribution.Copyable;

public class Task implements Copyable<Task> {
	private int duration; 
	private String name; 
	private Train train; 
	private ArrayList<Precedence> before; 
	private ArrayList<Precedence> after; 
	private ArrayList<RequiredResource> resources; 
	
	public Task(Train train) {
		this.train 		= train; 
		this.before		= new ArrayList<Precedence>(); 
		this.after 		= new ArrayList<Precedence>(); 
		this.resources 	= new ArrayList<RequiredResource>(); 
		this.duration 	= -1; 
	}
	
	public Task(Train train, String name) {
		this(train); 
		this.name = name; 
	}
	
	public int getDuration() throws Exception {
		if(duration<0) {
			throw new Exception("duration was never set"); 
		}
		return duration;
	}

	public void setDuration(int duration) {
		this.duration = duration;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public ArrayList<RequiredResource> getResources() {
		return resources;
	}

	public void setResources(ArrayList<RequiredResource> resources) {
		this.resources = resources;
	}
	
	/**
	 * Creates a copy in a new object of this Task, without taking into account the precedences. 
	 * The reference to the train is kept the same, this might have to be adjusted to a new train
	 * @return the copy task
	 */
	@Override
	public Task copy() {
		Task copyTask = new Task(this.train, this.name); 
		copyTask.addResource(this.resources); 
		return copyTask;
	}

	public void addResource(ArrayList<RequiredResource> r) {
		for(int i=0; i<r.size(); i++) {
			this.addResource(r.get(i));
		}
	}

	public void addResource(RequiredResource requiredResource) {
		this.resources.add(requiredResource); 		
	}
	
	public String toString() {
		StringBuilder sb = new StringBuilder(); 
		sb.append(this.name + this.duration); 
		
		if(0 != this.resources.size()) {
			sb.append("("); 
			sb.append(this.resources.get(0).toString()); 
		}
		for(int i=1; i<this.resources.size(); i++) {
			sb.append(", " + this.resources.get(i).toString());
		}
		sb.append(")"); 
		
		return sb.toString(); 
	}

	public void addResource(Resource r1, int capacity) {
		RequiredResource r = new RequiredResource(r1, capacity); 
		this.resources.add(r); 
	}

	public void isPreceededBy(Task firstTask) {
		Precedence p = new Precedence(firstTask, this); 
		this.before.add(p); 
		firstTask.getAfter().add(p); 
	}

	private ArrayList<Precedence> getAfter() {
		return this.after;
	}

	public Train getTrain() {
		return this.train;
	}

	public void setTrain(Train train) {
		this.train = train; 
	}

	public ArrayList<Precedence> getPrecedences() {
		return this.before;
	}

}
