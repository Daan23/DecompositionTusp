package classTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import nedtrainSchedulingShuntingProblem.AlgSettings.Init;
import nedtrainSchedulingShuntingProblem.AlgSettings.Prio;
import nedtrainSchedulingShuntingProblem.AlgSettings.Search;
import nedtrainSchedulingShuntingProblem.NsspInstance;
import nedtrainSchedulingShuntingProblem.NsspSolver;

import org.junit.Test;

import instanceGenerator.InstanceExecuter;

public class TestFreeRelocationCount {
		
		private static final boolean DEBUG 				= false; 
		private static final boolean DEBUG_ALG_STEPS 	= false; 

		@Test
		public void test1() {
			NsspSolver ns = null; 
			try {
			
			if(DEBUG) System.out.println("========================test1========================");
			NsspInstance instance 			= GenTestTrpInstance.gen1(); 
			instance.setDebugging(DEBUG_ALG_STEPS); 

			ns = new NsspSolver(instance); 
			ns.setSubProblemInit(Init.trpProposes); 
			ns.createInitialSchedule(); 
			boolean b = ns.solve(); 
			assertTrue(b); 
			
			if (DEBUG) System.out.println(ns.toString());
			
			int nofFree = InstanceExecuter.calcNofFreeRelocations(ns.getInstance()); 
			
			if (DEBUG) System.out.println("nofFreeRelocations = " + nofFree);
			
			// m0 = 3
			// m1 = 2
			// m2 = 3
			// total = 8
			assertEquals(8, nofFree);
			
			} catch (Exception e) {
				if (DEBUG) System.out.println(ns.toString());
				e.printStackTrace();
				fail(); 
			}
		}
		
		/**
		 * Test if the trp schedule cost is updated correctly.
		 */
		@Test
		public void test2() {
			try {
			if(DEBUG) System.out.println("========================test2========================");
			NsspInstance instance 			= GenTestNsspInstance.gen2(); 
			instance.setDebugging(DEBUG_ALG_STEPS); 
			
			NsspSolver ns = new NsspSolver(instance); 
			ns.setSubProblemInit(Init.trpProposes);
			ns.setSubProblemPrio(Prio.trpBeforeTlp);
			ns.setSearch(Search.tabu); 
			ns.createInitialSchedule(); 
			boolean solved = ns.solve(); 
			
			if (DEBUG) System.out.println(ns.toString());
			
			assertTrue(solved);

			int nofFree = InstanceExecuter.calcNofFreeRelocations(ns.getInstance()); 
			
			if (DEBUG) System.out.println("nofFreeRelocations = " + nofFree);
			/*
			 * leftover space:
			 * a = 6 - 2 - 3 	= 1
			 * b = 5 - 4 		= 1
			 * c = 7 - 3 - 4 	= 0
			 * d = 4 - 2 - 2 	= 0
			 * 
			 * l0 = 4
			 * l1 = 3
			 * l2 = 2
			 * l3 = 4
			 * l4 = 2
			 * l5 = 2
			 * l6 = 3
			 */
			assertEquals(0, nofFree);
			
			} catch (Exception e) {
				e.printStackTrace();
				fail(); 
			}
		}
		

		@Test
		public void test3() {
			NsspSolver ns = null; 
			try {
			
			if(DEBUG) System.out.println("========================test3========================");
			NsspInstance instance 			= GenTestTrpInstance.gen1(); 
			instance.setDebugging(DEBUG_ALG_STEPS); 

			ns = new NsspSolver(instance); 
			ns.setSubProblemInit(Init.trpProposes); 
			ns.createInitialSchedule(); 
			boolean b = ns.solve(); 
			assertTrue(b); 
			
			if (DEBUG) System.out.println(ns.toString());
			
			int nofFree = InstanceExecuter.calcNofFreeTracks(ns.getInstance()); 
			
			if (DEBUG) System.out.println("nofFreeTracks = " + nofFree);
			
			// m0 = 3
			// m1 = 2
			// m2 = 2
			// m3 = 3
			// m4 = 4
			// total = 14
			assertEquals(14, nofFree);
			
			} catch (Exception e) {
				if (DEBUG) System.out.println(ns.toString());
				e.printStackTrace();
				fail(); 
			}
		}
		/**
		 * Test if the trp schedule cost is updated correctly.
		 */
		@Test
		public void test4() {
			try {
			if(DEBUG) System.out.println("========================test4========================");
			NsspInstance instance 			= GenTestNsspInstance.gen2(); 
			instance.setDebugging(DEBUG_ALG_STEPS); 
			
			NsspSolver ns = new NsspSolver(instance); 
			ns.setSubProblemInit(Init.trpProposes);
			ns.setSubProblemPrio(Prio.trpBeforeTlp);
			ns.setSearch(Search.tabu); 
			ns.createInitialSchedule(); 
			boolean solved = ns.solve(); 
			
			if (DEBUG) System.out.println(ns.toString());
			
			assertTrue(solved);

			int nofFree = InstanceExecuter.calcNofFreeTracks(ns.getInstance()); 
			
			if (DEBUG) System.out.println("nofFreeRelocations = " + nofFree);
			/*
			 * m0 	3
			 * m1	2
			 * m2	1
			 * m3	1
			 * m4	1
			 * m5	0
			 * m6	0
			 * 
			 * m7	0
			 * m8	1
			 * m9	1
			 * m10	1
			 * m11	2
			 * m12	3
			 * m13	4
			 * 
			 * total 20
			 */
			assertEquals(20, nofFree);
			
			} catch (Exception e) {
				e.printStackTrace();
				fail(); 
			}
		}
		
		
	}
