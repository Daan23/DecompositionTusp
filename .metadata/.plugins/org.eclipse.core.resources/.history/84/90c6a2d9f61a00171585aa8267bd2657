package classTests;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;

import org.junit.Test;

import mspInstance.Train;
import nedtrainSchedulingShuntingProblem.NsspInstance;
import nedtrainSchedulingShuntingProblem.NsspSolver;
import nsspAlgorithmVariations.InductiveSearch;
import nsspAlgorithmVariations.SolverFactory;
import shuntingYard.ShuntingYard;
import shuntingYard.Track;
import shuntingYardInstances.GenUtrechtOz;

public class TestGenUtrechtOz {
	

	private static final boolean DEBUG = true;
	private static final boolean DEBUG_ALG_STEPS = true;

	@SuppressWarnings("null")
	@Test
	/**
	 * Test if we can reach track 09
	 */
	public void test1() {
		InductiveSearch ns = null; 
		try {
		
		if(DEBUG) System.out.println("========================test1========================");
		ShuntingYard yard = GenUtrechtOz.genYard(); 
		
		NsspInstance instance 			= new NsspInstance(yard); 
		ArrayList<Track> options		= new ArrayList<>(); 
		Track t = yard.getTrack("09"); 
		options.add(t); 
		Train train = new Train("t0", 1); 
		instance.addMoment(0, train, options);
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		NsspSolver solver = SolverFactory.inductiveSearchOccurance().genSolver(instance);  
		solver.createInitialSchedule();
		boolean b = solver.solve(); 
		
		if (DEBUG) System.out.println(solver.toString());
		
		assertTrue(b);
		
		} catch (Exception e) {
			if (DEBUG) System.out.println(ns.toString());
			e.printStackTrace();
			fail(); 
		}
	}

	@SuppressWarnings("null")
	@Test
	/**
	 * Can we reach 62 from 09
	 */
	public void test2() {
		InductiveSearch ns = null; 
		try {
		
		if(DEBUG) System.out.println("========================test2========================");
		ShuntingYard yard = GenUtrechtOz.genYard(); 
		NsspInstance instance 			= new NsspInstance(yard); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		Train train = new Train("t0", 1); 
		
		ArrayList<Track> options1	= new ArrayList<>(); 
		Track t09 					= yard.getTrack("09"); 
		options1.add(t09); 
		instance.addMoment(0, train, options1);
		
		ArrayList<Track> options2	= new ArrayList<>(); 
		Track t62 					= yard.getTrack("62"); 
		options2.add(t62); 
		instance.addMoment(1, train, options2);
		
		NsspSolver solver = SolverFactory.inductiveSearchOccurance().genSolver(instance);  
		solver.createInitialSchedule();
		boolean b = solver.solve(); 
		
		if (DEBUG) System.out.println(solver.toString());
		
		assertTrue(b);
		
		} catch (Exception e) {
			if (DEBUG) System.out.println(ns.toString());
			e.printStackTrace();
			fail(); 
		}
	}
	

	@SuppressWarnings("null")
	@Test
	/**
	 * Can we reach 62 from 09 if 18 and 19 are occupied
	 */
	public void test3() {
		InductiveSearch ns = null; 
		try {
		
		if(DEBUG) System.out.println("========================test3========================");
		ShuntingYard yard = GenUtrechtOz.genYard(); 
		NsspInstance instance 			= new NsspInstance(yard); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		Train train1 = new Train("t1", 1); 
		Train train2 = new Train("t2", 1); 
		Train train3 = new Train("t3", 1); 
		
		ArrayList<Track> options1	= new ArrayList<>(); 
		Track t09 					= yard.getTrack("09"); 
		options1.add(t09); 
		instance.addMoment(0, train1, options1);
		
		ArrayList<Track> options2	= new ArrayList<>(); 
		Track t18 					= yard.getTrack("18"); 
		options2.add(t18); 
		instance.addMoment(1, train2, options2);
		
		ArrayList<Track> options3	= new ArrayList<>(); 
		Track t19 					= yard.getTrack("19"); 
		options3.add(t19); 
		instance.addMoment(2, train3, options3);
		
		ArrayList<Track> options4	= new ArrayList<>(); 
		Track t62 					= yard.getTrack("62"); 
		options4.add(t62); 
		instance.addMoment(3, train1, options4);
		
		NsspSolver solver = SolverFactory.inductiveSearchOccurance().genSolver(instance);  
		solver.createInitialSchedule();
		boolean b = solver.solve(); 
		
		if (DEBUG) System.out.println(solver.toString());
		
		assertTrue(b);
		
		} catch (Exception e) {
			if (DEBUG) System.out.println(ns.toString());
			e.printStackTrace();
			fail(); 
		}
	}

}
