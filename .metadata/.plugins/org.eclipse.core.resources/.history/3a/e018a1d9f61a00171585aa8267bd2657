package classTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import instanceGenerator.InstanceParser;
import nedtrainSchedulingShuntingProblem.AlgSettings;
import nedtrainSchedulingShuntingProblem.AlgSettings.Init;
import nedtrainSchedulingShuntingProblem.AlgSettings.Prio;
import nedtrainSchedulingShuntingProblem.AlgSettings.Search;
import nedtrainSchedulingShuntingProblem.NsspInstance;
import nedtrainSchedulingShuntingProblem.NsspSolver;
import nedtrainSchedulingShuntingProblem.ObservedMoment;
import nsspAlgorithmVariations.InductiveSearch;
import nsspAlgorithmVariations.SolverFactory;
import nsspAlgorithmVariations.InductiveSearch.Order;

import org.junit.Test;

import shuntingYard.Location;
import shuntingYard.ShuntingYard;
import shuntingYardInstances.GenKleineBinckhorst;
import trainLocationProblem.LocationCost;
import trainRoutingProblem.RouteCost;

public class TestInductiveSearch {

	
	private static final boolean DEBUG 				= false; 
	private static final boolean DEBUG_ALG_STEPS 	= false; 
	
	@Test
	public void test1() {
		InductiveSearch ns = null; 
		try {
		
		if(DEBUG) System.out.println("========================test1========================");
		NsspInstance instance 			= GenTestTrpInstance.gen1(); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings = settings();
		ns = new InductiveSearch(instance, settings, Order.OCCURANCE); 
		boolean b = ns.solve(); 
		assertTrue(b); 
		assertEquals(5, ns.getMaxScheduledMoments());
		
		if (DEBUG) System.out.println(ns.toString());
		
		Location expected 	= new Location(instance.getTrack("c").getSideB()); 
		Location m1			= instance.getMoment(1).getLocation(); 
		assertEquals(expected, m1);
		
		expected 		= new Location(instance.getTrack("d").getSideB()); 
		m1				= instance.getMoment(2).getLocation(); 
		assertEquals(expected, m1);
		} catch (Exception e) {
			if (DEBUG) System.out.println(ns.toString());
			e.printStackTrace();
			fail(); 
		}
	}
	
	/**
	 * This test shows that the sequential algorithm is not capable of solving a
	 * tight instance. 
	 */
	@Test
	public void test2() {
		InductiveSearch ns = null; 
		try {
		if(DEBUG) System.out.println("========================test5========================");
		NsspInstance instance 			= GenTestNsspInstance.gen2(); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings = settings();
		ns = new InductiveSearch(instance, settings, Order.OCCURANCE); 
		ns.createInitialSchedule(); 
		ns.solve(); 
		
		if (DEBUG) System.out.println(ns.toString());

		assertTrue(6 < ns.getMaxScheduledMoments());

		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}

	/**
	 * Test if the copied instance does not have any observers. 
	 */
	@Test
	public void test3() {
		NsspSolver ns = null; 
		try {
		
		if(DEBUG) System.out.println("========================test3========================");
		NsspInstance instance 	= GenTestTrpInstance.gen1(); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings 	= settings();
		ns 						= new NsspSolver(instance, settings); 
		ns.createInitialSchedule();
		
		int expectedObservers = 2; 
		ObservedMoment m 		= instance.getMoment(0); 
		int amountOfObservers 	= m.getObservers().size(); 
		assertEquals(expectedObservers, amountOfObservers);
		
		NsspInstance copyInstance = instance.copy(); 
		
		expectedObservers		= 0; 
		m						= copyInstance.getMoment(0); 
		amountOfObservers		= m.getObservers().size(); 
		assertEquals(expectedObservers, amountOfObservers);
		
		} catch (Exception e) {
			if (DEBUG) System.out.println(ns.toString());
			e.printStackTrace();
			fail(); 
		}
	}
	/**
	 * Test if copied instance is not updated
	 */
	@Test
	public void test4() {
		NsspSolver ns = null; 
		try {
		
		if(DEBUG) System.out.println("========================test4========================");
		NsspInstance instance 	= GenTestTrpInstance.gen1(); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings 		= settings();
		NsspInstance copyInstance 	= instance.copy(); 
		ns 							= new NsspSolver(copyInstance, settings); 
		ns.createInitialSchedule();
		
		int expectedObservers 		= 0; 
		ObservedMoment m 			= instance.getMoment(0); 
		int amountOfObservers 		= m.getObservers().size(); 
		assertEquals(expectedObservers, amountOfObservers);
		
		expectedObservers			= 2; 
		m							= copyInstance.getMoment(0); 
		amountOfObservers			= m.getObservers().size(); 
		assertEquals(expectedObservers, amountOfObservers);
		
		} catch (Exception e) {
			if (DEBUG) System.out.println(ns.toString());
			e.printStackTrace();
			fail(); 
		}
	}
	
	@Test
	public void test5() {
		InductiveSearch ns = null; 
		try {
		
		if(DEBUG) System.out.println("========================test1========================");
		NsspInstance instance 			= GenTestTrpInstance.gen1(); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings = settings();
		ns = new InductiveSearch(instance, settings, Order.TRAINARRIVAL); 
		boolean b = ns.solve(); 
		assertTrue(b); 
		
		if (DEBUG) System.out.println(ns.toString());
		
		Location expected 	= new Location(instance.getTrack("d").getSideB()); 
		Location m1			= instance.getMoment(1).getLocation(); 
		assertEquals(expected, m1);
		
		expected 		= new Location(instance.getTrack("c").getSideB()); 
		m1				= instance.getMoment(2).getLocation(); 
		assertEquals(expected, m1);
		} catch (Exception e) {
			if (DEBUG) System.out.println(ns.toString());
			e.printStackTrace();
			fail(); 
		}
	}
	
	/**
	 * This test shows that the sequential algorithm is not capable of solving a
	 * tight instance. 
	 */
	@Test
	public void test6() {
		InductiveSearch ns = null; 
		try {
		if(DEBUG) System.out.println("========================test6========================");
		NsspInstance instance 			= GenTestNsspInstance.gen2(); 
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings = settings();
		ns = new InductiveSearch(instance, settings, Order.TRAINARRIVAL); 
		ns.createInitialSchedule(); 
		boolean solved = ns.solve(); 
		
		if (DEBUG) System.out.println(ns.toString());

		assertTrue(!solved);
		assertEquals(12, ns.getMaxScheduledMoments());
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	
	

	
	/**
	 * Test if location coordinates are updated correctly. 
	 */
	@Test
	public void test7() {
		InductiveSearch ns = null; 
		try {
		if(DEBUG) System.out.println("========================test7========================");
		
		InstanceParser ip 			= new InstanceParser("./Instances/Debugging/");
		ShuntingYard yard 	= GenKleineBinckhorst.genYard();
		NsspInstance instance 		= ip.toInstance("instance_004trains_v000", yard);
		
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings = settings();
		ns = new InductiveSearch(instance, settings, Order.TRAINARRIVAL); 
		ns.createInitialSchedule(); 
		boolean solved = ns.solve(); 
		
		if (DEBUG) System.out.println(ns.toString());

		assertTrue(solved);
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	
	/**
	 * If a moment (12 in this case) was initialized on 61a, but it now needs to
	 * turn to get there, option 61a will be removed. In this case that moment
	 * needs to enter via 61b.
	 */
	@Test
	public void test8() {
		InductiveSearch ns = null; 
		try {
		if(DEBUG) System.out.println("========================test8========================");
		
		InstanceParser ip 			= new InstanceParser("./Instances/Debugging/");
		ShuntingYard yard 	= GenKleineBinckhorst.genYard();
		NsspInstance instance 		= ip.toInstance("instance_005trains_v037", yard);
		
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings = settings();
		ns = new InductiveSearch(instance, settings, Order.TRAINARRIVAL); 
		ns.createInitialSchedule(); 
		boolean solved = ns.solve(); 
		
		if (DEBUG) System.out.println(ns.toString());

		assertTrue(solved);
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	
	/**
	 * Test inductive search created by factory. 
	 */
	@Test
	public void test9() {
		InductiveSearch ns = null; 
		try {
		if(DEBUG) System.out.println("========================test9========================");
		
		InstanceParser ip 			= new InstanceParser("./Instances/Debugging/");
		ShuntingYard yard 	= GenKleineBinckhorst.genYard();
		NsspInstance instance 		= ip.toInstance("instance_007trains_v031", yard);
		
		instance.setDebugging(DEBUG_ALG_STEPS); 
		
		AlgSettings settings = settings();
		settings.setSubProblemPrio(Prio.highestCost);
		
		SolverFactory sf 	= SolverFactory.inductiveSearchTrainArrival();  
		ns 					= (InductiveSearch) sf.genSolver(instance); 
		
		ns.createInitialSchedule(); 
		boolean solved = ns.solve(); 
		
		if (DEBUG) System.out.println(ns.toString());

		assertTrue(solved);
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	
	private AlgSettings settings() {
		AlgSettings settings = new AlgSettings(); 
		settings.setSearch(Search.tabu);
		settings.setSubProblemInit(Init.trpProposes); 
		
		RouteCost routeCost		= new RouteCost(); 
		routeCost.setStraightCost(			1);
		routeCost.setTurnCost(				1);
		routeCost.setObstructionCost(		10);
		settings.setRouteCost(routeCost);
		
		LocationCost locationCost = new LocationCost(); 
		locationCost.setSpaceConsumedCost(	-1);
		locationCost.setFreeRelocationCost(	-1); 
		locationCost.setConflictCost(		1000000);
		settings.setLocationCost(locationCost); 
		
		return settings;
	}
	
}
