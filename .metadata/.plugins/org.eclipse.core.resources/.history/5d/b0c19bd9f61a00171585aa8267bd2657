package classTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Test;

import mspInstance.Train;
import nedtrainSchedulingShuntingProblem.Moment;
import nedtrainSchedulingShuntingProblem.NsspInstance;
import nedtrainSchedulingShuntingProblem.NsspSolver;
import nsspAlgorithmVariations.SolverFactory;
import scheduler.EarliestDeadlineFirst;
import scheduler.FirstComeFirstServe;
import shuntingYard.ShuntingYard;
import shuntingYard.Side;
import shuntingYardInstances.GenUtrechtOz;

public class TestScheduler {

	private static final boolean DEBUG = true;
	private static final boolean DEBUG_ALG_STEPS = false;

	@Test
	/**
	 * Test if we can reach track 09
	 */
	public void test1() {
		try {
		
		if(DEBUG) System.out.println("========================test1========================");
		ShuntingYard yard = GenUtrechtOz.genYard(); 
		
		NsspInstance in1 			= new NsspInstance(yard); 
		in1.setDebugging(DEBUG_ALG_STEPS);

		Train t1 = new Train("t1", 52); 

		in1.addMoment(1, t1, yard.getParkTracks());

		in1.addMoment(1001, t1, yard.getCleaningTracks());

		in1.addMoment(2001, t1, yard.getParkTracks());

		in1.addMoment(10001, t1);
		
		FirstComeFirstServe scheduler = new FirstComeFirstServe(1000, true); 
		NsspInstance in2				= scheduler.genSchedule(in1); 
		in2.setDebugging(DEBUG_ALG_STEPS);

		NsspSolver solver = SolverFactory.inductiveSearchOccurance().genSolver(in2);  
		solver.createInitialSchedule();
		boolean b = solver.solve(); 
		if (DEBUG) System.out.println(solver.toString());
		
		assertTrue(in2.getFirstMoment(t1).getFirstPossibleSide().isCleaningTrack());
		assertEquals(2000, in2.getFirstMoment(t1).getNext().getTimePoint() - in2.getFirstMoment(t1).getTimePoint()); 
		assertEquals(3, in2.getNofMoments());
		
		assertTrue(b);
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	

	@Test
	/**
	 * Test if we can reach track 09
	 */
	public void test2() {
		try {
		
		if(DEBUG) System.out.println("========================test2========================");
		ShuntingYard yard = GenUtrechtOz.genYard(); 
		
		NsspInstance in1 			= new NsspInstance(yard); 
		in1.setDebugging(DEBUG_ALG_STEPS);

		Train t1 = new Train("t1", 52); 
		Train t2 = new Train("t2", 52); 
		Train t3 = new Train("t3", 52); 
		Train t4 = new Train("t4", 52); 

		in1.addMoment(1000, t1, yard.getParkTracks());	// 0
		in1.addMoment(1001, t2, yard.getParkTracks());	// 1000
		in1.addMoment(1002, t3, yard.getParkTracks());	// 2000
		in1.addMoment(1003, t4, yard.getParkTracks());	// 3000

		in1.addMoment(2000, t1, yard.getCleaningTracks());
		in1.addMoment(4000, t2, yard.getCleaningTracks());
		in1.addMoment(6000, t3, yard.getCleaningTracks());
		in1.addMoment(8000, t4, yard.getCleaningTracks());

		in1.addMoment(3000+2000, t1, yard.getParkTracks());
		in1.addMoment(5000+2000, t2, yard.getParkTracks());
		in1.addMoment(7000+2000, t3, yard.getParkTracks());
		in1.addMoment(9000+2000, t4, yard.getParkTracks());
                           
		in1.addMoment(100001, t1);
		in1.addMoment(100002, t2);
		in1.addMoment(100003, t3);
		in1.addMoment(100004, t4);
		
		FirstComeFirstServe scheduler = new FirstComeFirstServe(1000, true); 
		NsspInstance in2				= scheduler.genSchedule(in1); 
		in2.setDebugging(DEBUG_ALG_STEPS);
		
		NsspSolver solver = SolverFactory.inductiveSearchOccurance().genSolver(in2);  
		solver.createInitialSchedule();
		boolean b = solver.solve(); 
		
		if (DEBUG) System.out.println(solver.toString());
		
		assertTrue(b);
		assertEquals(14, in2.getNofMoments());
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	

	@Test
	/**
	 * Test if we can reach track 09
	 */
	public void test3() {
		try {
		
		if(DEBUG) System.out.println("========================test3========================");
		ShuntingYard yard = GenUtrechtOz.genYard(); 
		
		NsspInstance in1 			= new NsspInstance(yard); 
		in1.setDebugging(DEBUG_ALG_STEPS);

		Train t1 = new Train("t1", 52); 

		in1.addMoment(0, t1, yard.getParkTracks());

		in1.addMoment(1001, t1, yard.getCleaningTracks());

		in1.addMoment(2001, t1, yard.getParkTracks());

		in1.addMoment(4001, t1);
		
		FirstComeFirstServe scheduler 	= new EarliestDeadlineFirst(1000, 1000, true); 
		NsspInstance in2				= scheduler.genSchedule(in1); 
		in2.setDebugging(DEBUG_ALG_STEPS);

		NsspSolver solver = SolverFactory.inductiveSearchOccurance().genSolver(in2);  
		solver.createInitialSchedule();
		boolean b = solver.solve(); 
		if (DEBUG) System.out.println(solver.toString());
		
		Moment tempM = in2.getFirstMoment(t1); 
		Side tempS		= tempM.getFirstPossibleSide(); 
		boolean firstMomentIsCleaningMoment = tempS.isCleaningTrack(); 
		
		assertTrue(firstMomentIsCleaningMoment);
		assertEquals(2000, in2.getFirstMoment(t1).getNext().getTimePoint() - in2.getFirstMoment(t1).getTimePoint()); 
		assertEquals(3, in2.getNofMoments());
		
		assertTrue(b);
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	

	@Test
	/**
	 * Test if we can reach track 09
	 */
	public void test4() {
		try {
		
		if(DEBUG) System.out.println("========================test4========================");
		ShuntingYard yard = GenUtrechtOz.genYard(); 
		
		NsspInstance in1 			= new NsspInstance(yard); 
		in1.setDebugging(DEBUG_ALG_STEPS);

		Train t1 = new Train("t1", 52); 
		Train t2 = new Train("t2", 52); 
		Train t3 = new Train("t3", 52); 
		Train t4 = new Train("t4", 52); 

		in1.addMoment(1000, t1, yard.getParkTracks());	// 0
		in1.addMoment(1001, t2, yard.getParkTracks());	// 1000
		in1.addMoment(1002, t3, yard.getParkTracks());	// 2000
		in1.addMoment(1003, t4, yard.getParkTracks());	// 3000

		in1.addMoment(2000, t1, yard.getCleaningTracks());
		in1.addMoment(4000, t2, yard.getCleaningTracks());
		in1.addMoment(6000, t3, yard.getCleaningTracks());
		in1.addMoment(8000, t4, yard.getCleaningTracks());

		in1.addMoment(3000+2000, t1, yard.getParkTracks());
		in1.addMoment(5000+2000, t2, yard.getParkTracks());
		in1.addMoment(7000+2000, t4, yard.getParkTracks());
		in1.addMoment(9000+2000, t3, yard.getParkTracks());
                           
		in1.addMoment(100001, t1);
		in1.addMoment(100002, t2);
		in1.addMoment(100003, t3);
		in1.addMoment(100004, t4);
		
		FirstComeFirstServe scheduler = new EarliestDeadlineFirst(1000, 1000, true); 
		NsspInstance in2				= scheduler.genSchedule(in1); 
		in2.setDebugging(DEBUG_ALG_STEPS);
		
		NsspSolver solver = SolverFactory.inductiveSearchOccurance().genSolver(in2);  
		solver.createInitialSchedule();
		boolean b = solver.solve(); 
		
		if (DEBUG) System.out.println(solver.toString());
		
		assertTrue(b);
		assertEquals(14, in2.getNofMoments());
		
		} catch (Exception e) {
			e.printStackTrace();
			fail(); 
		}
	}
	

	
}
